/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Vocode from "../../api/index";
import * as core from "../../core";
import { NormalizedAgentPrompt } from "./NormalizedAgentPrompt";
import { Language } from "./Language";
import { NormalizedAgentVectorDatabase } from "./NormalizedAgentVectorDatabase";
import { InterruptSensitivity } from "./InterruptSensitivity";
import { NormalizedAgentEndpointingSensitivity } from "./NormalizedAgentEndpointingSensitivity";
import { NormalizedAgentIvrNavigationMode } from "./NormalizedAgentIvrNavigationMode";
import { NormalizedAgentOpenaiAccountConnection } from "./NormalizedAgentOpenaiAccountConnection";
import { InternalLlmFallback } from "./InternalLlmFallback";
import { NormalizedAgentDeepgramKeywordsValue } from "./NormalizedAgentDeepgramKeywordsValue";

export const NormalizedAgent: core.serialization.ObjectSchema<serializers.NormalizedAgent.Raw, Vocode.NormalizedAgent> =
    core.serialization.object({
        id: core.serialization.string(),
        userId: core.serialization.property("user_id", core.serialization.string()),
        name: core.serialization.string().optional(),
        prompt: NormalizedAgentPrompt,
        language: Language.optional(),
        actions: core.serialization.list(core.serialization.string()),
        voice: core.serialization.string(),
        initialMessage: core.serialization.property("initial_message", core.serialization.string().optional()),
        webhook: core.serialization.string().optional(),
        vectorDatabase: core.serialization.property("vector_database", NormalizedAgentVectorDatabase.optional()),
        interruptSensitivity: core.serialization.property("interrupt_sensitivity", InterruptSensitivity.optional()),
        contextEndpoint: core.serialization.property("context_endpoint", core.serialization.string().optional()),
        noiseSuppression: core.serialization.property("noise_suppression", core.serialization.boolean().optional()),
        endpointingSensitivity: core.serialization.property(
            "endpointing_sensitivity",
            NormalizedAgentEndpointingSensitivity.optional()
        ),
        ivrNavigationMode: core.serialization.property(
            "ivr_navigation_mode",
            NormalizedAgentIvrNavigationMode.optional()
        ),
        conversationSpeed: core.serialization.property("conversation_speed", core.serialization.number().optional()),
        initialMessageDelay: core.serialization.property(
            "initial_message_delay",
            core.serialization.number().optional()
        ),
        openaiModelNameOverride: core.serialization.property(
            "openai_model_name_override",
            core.serialization.string().optional()
        ),
        askIfHumanPresentOnIdle: core.serialization.property(
            "ask_if_human_present_on_idle",
            core.serialization.boolean().optional()
        ),
        openaiAccountConnection: core.serialization.property(
            "openai_account_connection",
            NormalizedAgentOpenaiAccountConnection.optional()
        ),
        runDoNotCallDetection: core.serialization.property(
            "run_do_not_call_detection",
            core.serialization.boolean().optional()
        ),
        llmFallback: core.serialization.property("llm_fallback", InternalLlmFallback.optional()),
        deepgramKeywords: core.serialization.property(
            "deepgram_keywords",
            core.serialization
                .record(core.serialization.string(), NormalizedAgentDeepgramKeywordsValue.optional())
                .optional()
        ),
        llmTemperature: core.serialization.property("llm_temperature", core.serialization.number().optional()),
    });

export declare namespace NormalizedAgent {
    interface Raw {
        id: string;
        user_id: string;
        name?: string | null;
        prompt: NormalizedAgentPrompt.Raw;
        language?: Language.Raw | null;
        actions: string[];
        voice: string;
        initial_message?: string | null;
        webhook?: string | null;
        vector_database?: NormalizedAgentVectorDatabase.Raw | null;
        interrupt_sensitivity?: InterruptSensitivity.Raw | null;
        context_endpoint?: string | null;
        noise_suppression?: boolean | null;
        endpointing_sensitivity?: NormalizedAgentEndpointingSensitivity.Raw | null;
        ivr_navigation_mode?: NormalizedAgentIvrNavigationMode.Raw | null;
        conversation_speed?: number | null;
        initial_message_delay?: number | null;
        openai_model_name_override?: string | null;
        ask_if_human_present_on_idle?: boolean | null;
        openai_account_connection?: NormalizedAgentOpenaiAccountConnection.Raw | null;
        run_do_not_call_detection?: boolean | null;
        llm_fallback?: InternalLlmFallback.Raw | null;
        deepgram_keywords?: Record<string, NormalizedAgentDeepgramKeywordsValue.Raw | null | undefined> | null;
        llm_temperature?: number | null;
    }
}
