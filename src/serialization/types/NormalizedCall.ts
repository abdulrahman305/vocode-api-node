/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vocode from "../../api";
import * as core from "../../core";

export const NormalizedCall: core.serialization.ObjectSchema<serializers.NormalizedCall.Raw, Vocode.NormalizedCall> =
    core.serialization.object({
        id: core.serialization.string(),
        userId: core.serialization.property("user_id", core.serialization.string()),
        status: core.serialization.lazy(async () => (await import("..")).CallStatus).optional(),
        errorMessage: core.serialization.property("error_message", core.serialization.string().optional()),
        recordingAvailable: core.serialization.property("recording_available", core.serialization.boolean().optional()),
        transcript: core.serialization.string().optional(),
        toNumber: core.serialization.property("to_number", core.serialization.string()),
        fromNumber: core.serialization.property("from_number", core.serialization.string()),
        agent: core.serialization.string(),
    });

export declare namespace NormalizedCall {
    interface Raw {
        id: string;
        user_id: string;
        status?: serializers.CallStatus.Raw | null;
        error_message?: string | null;
        recording_available?: boolean | null;
        transcript?: string | null;
        to_number: string;
        from_number: string;
        agent: string;
    }
}
